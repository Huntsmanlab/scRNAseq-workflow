# find cell types present in the seurat object, sort them alphabetically
unique_cell_types <- as.vector(sort(unique(seurat_object$cell_type)))
# find common cell types between our lists and the master cell type list
common <- intersect(unique_cell_types, master_cell_types)
# find the indices where we have common these cell types in the master cell type list
idx <- match(common, master_cell_types)
# pick colors that correspond to the indices
colors_chosen <- master_color_palette[idx]
# make cell assign plot
plot <- DimPlot(object = seurat_object,
dims = c(1, 2),
reduction = reduction_type,
group.by = group_by,
pt.size = 1.5) +
scale_color_manual(values = colors_chosen) +
labs(title = paste(unique(seurat_object$id), 'Cell Assign for scRNAseq Cells', sep = '-'))
return(plot)
} # end of function
p3 <- visualize_cellassign(integrated, 'tsne', 'id', master_color_palette, master_cell_types)
visualize_cellassign <- function(seurat_object, reduction_type, group_by, master_color_palette, master_cell_types){
# find cell types present in the seurat object, sort them alphabetically
unique_cell_types <- as.vector(sort(unique(seurat_object$cell_types)))
# find common cell types between our lists and the master cell type list
common <- intersect(unique_cell_types, master_cell_types)
# find the indices where we have common these cell types in the master cell type list
idx <- match(common, master_cell_types)
# pick colors that correspond to the indices
colors_chosen <- master_color_palette[idx]
# make cell assign plot
plot <- DimPlot(object = seurat_object,
dims = c(1, 2),
reduction = reduction_type,
group.by = group_by,
pt.size = 1.5) +
scale_color_manual(values = colors_chosen) +
labs(title = paste(unique(seurat_object$id), 'Cell Assign for scRNAseq Cells', sep = '-'))
return(plot)
} # end of function
p3 <- visualize_cellassign(integrated, 'tsne', 'id', master_color_palette, master_cell_types)
p3
p3 <- visualize_cellassign(integrated, 'tsne', 'cell_types', master_color_palette, master_cell_types)
p3
p6 <- visualize_cellassign(integrated, 'umap', 'cell_types', master_color_palette, master_cell_types)
p6
integrated <- readRDS("/huntsman/amunzur/data/integrated_cellassign/VOA11068_ENOC-DH13-DH18/integrated_cas.rds")
= 'id', combine = TRUE) +
p3 <- DimPlot(integrated, reduction = 'tsne', group.by = 'id', combine = TRUE) +
ggtitle(paste(params$pair_ids, 'tsne showing sample ids', sep = '/'))
p4 <- visualize_cellassign(integrated, 'tsne', 'cell_types', master_color_palette, master_cell_types) +
ggtitle(paste(params$pair_ids, 'tsne showing cell types', sep = '/'))
p3
p4
seurat_object <- integrated
# find cell types present in the seurat object, sort them alphabetically
unique_cell_types <- as.vector(sort(unique(seurat_object$cell_types)))
unique_cell_types
master_color_palette <- c(
"cyan2", # red
"firebrick1",
"green3", # purple
"indianred1",
"lightskyblue",
"gold1", # lt pink
"lightsalmon1",
"plum2",
"springgreen",
"darkslateblue",
'royalblue1',
'chartreuse1',
'mediumorchid2',
'khaki1')
# to visualize these colors
pie(rep(1, 14), col = master_color_palette)
master_color_palette <- c(
"cyan2", # red
"firebrick1",
"green3", # purple
"indianred1",
"lightskyblue",
"gold1", # lt pink
"lightsalmon1",
"plum2",
"springgreen",
"darkslateblue",
'royalblue1',
'chartreuse1',
'mediumorchid2',
'khaki1',
'thistle4')
# to visualize these colors
pie(rep(1, 15), col = master_color_palette)
# make clustering plots
clustering_plots_tsne <- lapply(seur_sce_list, function(seurat_object) DimPlot(seurat_object, reduction = "tsne") + ggtitle(paste(unique(seurat_object$id), 'clusters', sep = ' - ')))
# get separate ids from the params$pair_ids
id.list <- strsplit(params$pair_ids, "-")[[1]] # split by "-" SO ID must NOT CONTAIN "-"
id.list <- as.list(c(unlist(list(id.list))))
# load cell assign result
sce_norm_cas_list <- lapply(id.list, function(id) readRDS(here('..', 'data', 'cellassign', id, 'sce_norm_cas.rds')))
id.list
# get separate ids from the params$pair_ids
id.list <- strsplit(params$pair_ids, "-")[[1]] # split by "-" SO ID must NOT CONTAIN "-"
id.list <- as.list(c(unlist(list(id.list))))
id.list
# load cell assign result
sce_norm_cas_list <- lapply(id.list, function(id) readRDS(here('..', 'data', 'cellassign', id, 'sce_norm_cas.rds')))
# make seurat objects
seur_sce_list <- lapply(sce_norm_cas_list, function(sce) as.Seurat(sce)) # make a seurat object
analysis
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) ScaleData(seurat_object))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) FindVariableFeatures(seurat_object))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) RunPCA(seurat_object, verbose = FALSE))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) RunTSNE(seurat_object, dims = 1:30, check_duplicates = FALSE))
# make clustering plots
clustering_plots_tsne <- lapply(seur_sce_list, function(seurat_object) DimPlot(seurat_object, reduction = "tsne") + ggtitle(paste(unique(seurat_object$id), 'clusters', sep = ' - ')))
seurat_object <- seur_sce_list[[1]]
seurat_object
seurat_object$id
DimPlot(seurat_object, reduction = "tsne") + ggtitle(paste(unique(seurat_object$id), 'clusters', sep = ' - ')))
DimPlot(seurat_object, reduction = "tsne") + ggtitle(paste(unique(seurat_object$id), 'clusters', sep = ' - '))
# load a few necessary things
library(here)
source(here('pipeline', 'sourceFiles', 'utilities.R'))
id.list <- strsplit(params$pair_ids, "-")[[1]] # split by "-" SO ID must NOT CONTAIN "-"
id.list <- as.list(c(unlist(list(id.list))))
id.list <- do.call(list, id.list)
id.orig <- id.list
# lets start!
# load the normalized data with cell type assignments
sces <- lapply(id.list, function(id) readRDS(here('..', 'data', 'cellassign', id, 'sce_norm_cas.rds')))
# subset to common genes across a group of sces
sces <- intersect_all(sces)
# add the id number in front of cell barcodes
repeated <- lapply(sces, function(sce) dim(sce)[[2]]) # extract cell numbers from each sce
id.list <- mapply(rep, id.list, repeated) # repeat the cell ids as many times as the cell number
# sometimes different samples use same barcodes, we will append the id name in front of the barcodes to avoid that
# we use a period to separate the id and the barcode because some ids use '_' already
for (i in 1:length(sces)) {
colnames(sces[[i]]) <- paste(id.list[[i]], colnames(sces[[i]]), sep = '.')
}
# convert them all to seurat objects
seurats <- lapply(sces, function(sce) CreateSeuratObject(counts = counts(sce), min.cells = 3, min.features = 200))
# we dont normalize because the data is already normalized
# seurats <- lapply(seurats, function(seurat) NormalizeData(seurat, verbose = FALSE))
# find variable features for each of our seurat objects
seurats <- lapply(seurats, function(seurat) FindVariableFeatures(seurat, selection.method = "vst", nfeatures = 2000))
# select the number of features to integrate
id.features <- SelectIntegrationFeatures(object.list = seurats, nfeatures = nrow(seurats[[1]]))
# make a reference list for the next step
anchors <- FindIntegrationAnchors(object.list = seurats, dims = 1:30)
# find the common genes
total.genes <- lapply(seurats, function(seurat) rownames(seurat@assays$RNA@counts))
common.genes <- Reduce(f = intersect, x = total.genes)
# now merge the data, passing the common genes help us only integrate those and disregard the other genes
integrated <- IntegrateData(anchorset = anchors, dims = 1:30, features.to.integrate = common.genes)
# now we will add the sample ids each sample is associated with
sample_names <- strsplit(colnames(integrated), '.', fixed = TRUE)
sample_names <- lapply(sample_names, function(element) as.list(element))
sample_names <- lapply(sample_names, function(element) element[[1]])
sample_names <- do.call(rbind, sample_names)
rownames(sample_names) <- colnames(integrated)
# add this to the metadata
integrated <- AddMetaData(integrated, sample_names, col.name = 'id')
# now we add the cell type info from cell assigh to the metadata, we start by extracting this info from the sces
cell_types <- lapply(sces, function(sce) sce$cell_type)
cell_types <- as.list(c(unlist(list(cell_types))))  # prepare for rbind by putting data in a good format
cell_types <- do.call(rbind, cell_types)
# add cell types to metadata
# integrated <- AddMetaData(integrated, cell_types, col.name = 'cell_types') # this one doesnt work for some reason, but code below does
integrated$cell_types <- cell_types
# the default assay is the new one
DefaultAssay(integrated) <- "integrated"
# then some standard workflow for visualization and dim reduction
integrated <- ScaleData(integrated, verbose = FALSE)
set.seed(1998)
integrated <- RunPCA(integrated, verbose = FALSE)
integrated <- RunUMAP(integrated, dims = 1:30)
integrated <- RunTSNE(integrated, dims = 1:30)
# save the data, assuming you made the folder where the data would be saved
saveRDS(integrated, file = params$output_path) # corrected data
saveRDS(integrated, file = here('..', 'data', 'integrated_cellassign', params$pair_ids, 'integrated_cas.rds')) # corrected data
reticulate::repl_python()
length(master_color_palette)
length(master_cell_types)
library(here)
source(here('pipeline', 'sourceFiles', 'utilities.R'))
source(here('pipeline', 'cellassign', 'create_marker_matrix.R'))
source(here('pipeline', 'cellassign', 'assign_cell_type.R'))
# get separate ids from the params$pair_ids
id.list <- strsplit(params$pair_ids, "-")[[1]] # split by "-" SO ID must NOT CONTAIN "-"
id.list <- as.list(c(unlist(list(id.list))))
# now plots for batch corrected (integrated) samples
integrated <- readRDS(here('..', 'data', 'integrated_cellassign', params$pair_ids, 'integrated_cas.rds'))
p3 <- DimPlot(integrated, reduction = 'tsne', group.by = 'id', combine = TRUE) +
ggtitle(paste(params$pair_ids, 'tsne showing sample ids', sep = '/'))
p3
p4 <- visualize_cellassign(integrated, 'tsne', 'cell_types', master_color_palette, master_cell_types) +
ggtitle(paste(params$pair_ids, 'tsne showing cell types', sep = '/'))
p4
# load cell assign result
sce_norm_cas_list <- lapply(id.list, function(id) readRDS(here('..', 'data', 'cellassign', id, 'sce_norm_cas.rds')))
# make seurat objects
seur_sce_list <- lapply(sce_norm_cas_list, function(sce) as.Seurat(sce)) # make a seurat object
# run clustering and dim reduction analysis
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) ScaleData(seurat_object))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) FindVariableFeatures(seurat_object))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) RunPCA(seurat_object, verbose = FALSE))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) RunTSNE(seurat_object, dims = 1:30, check_duplicates = FALSE))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) RunUMAP(seurat_object, dims = 1:30))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) FindNeighbors(seurat_object, dims = 1:10))
seur_sce_list <- lapply(seur_sce_list, function(seurat_object) FindClusters(seurat_object, resolution = 0.5))
# TO DO LATER
# save the seurat objects with the clustering information
# make clustering plots
clustering_plots_tsne <- lapply(seur_sce_list, function(seurat_object) DimPlot(seurat_object, reduction = "tsne") + ggtitle(paste(unique(seurat_object$id), 'clusters', sep = ' - ')))
# make cell assign plots
# find which cell types we have, sort them alphabetically
unique_cell_types <- lapply(seur_sce_list, function(seurat_object) as.vector(sort(unique(seurat_object$cell_type))))
# find common cell types between our lists and the master cell type list
common_list <- lapply(unique_cell_types, function(some_list) intersect(some_list, master_cell_types))
# find the indices where we have common these cell types in the master cell type list
idx_list <- lapply(common_list, function(some_list) match(some_list, master_cell_types))
# pick colors that correspond to the indices
colors_chosen_list <- lapply(idx_list, function(idx) master_color_palette[idx])
# make cell assign plots
plots_list <- list()
i <- 1
while (i <= length(seur_sce_list)){
plot <- DimPlot(object = seur_sce_list[[i]],
dims = c(1, 2),
reduction = 'tsne',
group.by = 'cell_type',
pt.size = 1.5) +
scale_color_manual(values = colors_chosen_list[[i]]) +
labs(title = paste(unique(seur_sce_list[[i]]$id), 'Cell Assign for scRNAseq Cells', sep = '-'))
plots_list[[paste(i)]] <- plot # save the plot to the plots list
i <- i + 1
}
plots_list
if (length(clustering_plots_tsne) == 1) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]], nrow = 1)
} else if (length(clustering_plots_tsne) == 2) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]], nrow = 2)
} else if (length(clustering_plots_tsne) == 2) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]], nrow = 3)
} else if (length(clustering_plots_tsne) == 2) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]],
clustering_plots_tsne[[4]], plots_list[[4]], nrow = 4)
} else if (length(clustering_plots_tsne) == 2) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]],
clustering_plots_tsne[[4]], plots_list[[4]],
clustering_plots_tsne[[5]], plots_list[[5]], nrow = 5) } # end of if loop
if (length(clustering_plots_tsne) == 1) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]], nrow = 1)
} else if (length(clustering_plots_tsne) == 2) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]], nrow = 2)
} else if (length(clustering_plots_tsne) == 3) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]], nrow = 3)
} else if (length(clustering_plots_tsne) == 4) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]],
clustering_plots_tsne[[4]], plots_list[[4]], nrow = 4)
} else if (length(clustering_plots_tsne) == 5) {
grid.arrange(clustering_plots_tsne[[1]], plots_list[[1]],
clustering_plots_tsne[[2]], plots_list[[2]],
clustering_plots_tsne[[3]], plots_list[[3]],
clustering_plots_tsne[[4]], plots_list[[4]],
clustering_plots_tsne[[5]], plots_list[[5]], nrow = 5) } # end of if loop
bgi_75 <- readRDS("/huntsman/amunzur/data/qc/bgi_175_001/sce_qc.rds")
ilm_75 <- readRDS("/huntsman/amunzur/data/qc/ilm_175_001/sce_qc.rds")
sces <- list(bgi_75, ilm_75)
rownames_list <- lapply(sces, function(sce) rownames(sce)) # extract row names
universal <- Reduce(intersect, rownames_list) # find the common row names in the list
length(universal)
nrow(bgi_75)
nrow(ilm_75)
length(rownames_list)
nrow(rownames_list[[1]])
length(rownames_list[[1]])
length(rownames_list[[2]])
nrow(bgi_75)
nrow(ilm_75)
View(counts(bgi_75))
View(counts(ilm_75))
bgi_76 <- readRDS("/huntsman/amunzur/data/qc/bgi_176_001/sce_qc.rds")
ilm_76 <- readRDS("/huntsman/amunzur/data/qc/ilm_176_001/sce_qc.rds")
nrow(bgi_76)
nrow( ilm_76)
nrow( ilm_75)
ncol( ilm_75)
ncol( ilm_76)
ncol(bgi_76)
ncol(bgi_75)
View(counts(bgi_75]))
View(counts(bgi_75))
View(counts(ilm_75))
View(as.data.frame(counts(ilm_75)))
View(as.data.frame(counts(ilm_76)))
bgi75_raw <- readRDS("/huntsman/amunzur/data/processed/bgi_175_001/sce.rds")
nrow(bgi75_raw)
dh10_raw <- readRDS("/huntsman/amunzur/data/processed/DH10/sce.rds")
dh10_qc <- readRDS("/huntsman/amunzur/data/qc/DH10/sce_qc.rds")
nrow(dh10_raw)
nrow(dh10_qc)
gene_filter <- function(sce, gene_min_counts, gene_min_detection_rate, reporters = NULL){
count_drop <- rowSums(counts(sce)) < gene_min_counts
rate_drop <- (rowSums(counts(sce) > 0) / dim(sce)[2] * 100) < gene_min_detection_rate
mt_genes <- grepl("^MT-", rowData(sce)$Symbol)
ribo_genes <- grepl("^RP[LS]", rowData(sce)$Symbol)
gene_drop <- (count_drop | rate_drop | mt_genes | ribo_genes)
if(!is.null(reporters)) {
report_genes <- rownames(sce) %in% reporters
gene_drop <- (gene_drop | report_genes )
}
rowData(sce)$qc_pass <- !gene_drop
return(sce)
}
gene_filter <- function(sce, gene_min_counts, gene_min_detection_rate, reporters = NULL){
count_drop <- rowSums(counts(sce)) < gene_min_counts
rate_drop <- (rowSums(counts(sce) > 0) / dim(sce)[2] * 100) < gene_min_detection_rate
mt_genes <- grepl("^MT-", rowData(sce)$Symbol)
ribo_genes <- grepl("^RP[LS]", rowData(sce)$Symbol)
gene_drop <- (count_drop | rate_drop | mt_genes | ribo_genes)
if(!is.null(reporters)) {
report_genes <- rownames(sce) %in% reporters
gene_drop <- (gene_drop | report_genes )
}
rowData(sce)$qc_pass <- !gene_drop
return(sce)
}
bgi_75
bgi_75 <- gene_filter(bgi_75, 100, 5, NULL)
nrow(bgi_75)
nrow(bgi_76)
bgi_76 <- gene_filter(bgi_76, 100, 5, NULL)
nrow(bgi_76)
sce <- bgi_75
gene_min_detection_rate <- 5
gene_min_counts <- 100
count_drop <- rowSums(counts(sce)) < gene_min_counts
count_drop
rate_drop <- (rowSums(counts(sce) > 0) / dim(sce)[2] * 100) < gene_min_detection_rate
rate_drop
mt_genes <- grepl("^MT-", rowData(sce)$Symbol)
ribo_genes <- grepl("^RP[LS]", rowData(sce)$Symbol)
gene_drop <- (count_drop | rate_drop | mt_genes | ribo_genes)
gene_drop
rowData(sce)$qc_pass <- !gene_drop
nrow(sce)
nrow)dh10_raw
nrow(sh10_raw)
nrow(dh10_raw)
dh10 <- gene_filter(dh10_qc, 100, 5, NULL)
nrow(dh10)
sce$qc_pass
sce
sce$id
rowData(sce)$qc_pass <- !gene_drop
rowdata(sce)$qc_pass
rowData(sce)$qc_pass
gene_filter <- function(sce, gene_min_counts, gene_min_detection_rate, reporters = NULL){
count_drop <- rowSums(counts(sce)) < gene_min_counts
rate_drop <- (rowSums(counts(sce) > 0) / dim(sce)[2] * 100) < gene_min_detection_rate
mt_genes <- grepl("^MT-", rowData(sce)$Symbol)
ribo_genes <- grepl("^RP[LS]", rowData(sce)$Symbol)
gene_drop <- (count_drop | rate_drop | mt_genes | ribo_genes)
sce <- sce[!gene_drop, ]
return(sce)
}
nrow(bgi_75)
bgi_75 <- gene_filter(bgi_75, 100, 5, NULL)
nrow(bgi_75)
nrow(ilm_75)
ilm_75 <- gene_filter(ilm_75, 100, 5, NULL)
nrow(ilm_75)
bgi_75_df <- as.data.frame(counts(bgi_75_df))
ilm_75_df <- as.data.frame(counts(ilm_75_df))
bgi_75_df <- as.data.frame(counts(bgi_75))
ilm_75_df <- as.data.frame(counts(ilm_75))
# binarize
bgi_75_df[bgi_75_df > 0] = 1
ilm_75_df[ilm_75_df > 0] = 1
View(bgi_75_df)
ncol(bgi_75_df)
ncol(ilm_75_df)
# subtraction
subtraction <- bgi_75_df - ilm_75_df
# make them same size
ilm_75_df <- ilm_75_df[, 1:1249]
ncol(ilm_75_df)
nrow(ilm_75_df)
nrow(bgi_75_df)
ilm_75
dim(bgi_75_df)
dim(ilm_75_df)
bgi_75_df <- as.data.frame(counts(bgi_75))
ilm_75_df <- as.data.frame(counts(ilm_75))
# find the common genes between two data frames
intersect(rownames(bgi_75_df), rownames(ilm_75_df))
# find the common genes between two data frames
common_genes <- intersect(rownames(bgi_75_df), rownames(ilm_75_df))
length(common_genes)
nrow(bgi_75_df)
nrow(ilm_75_df)
# make them same size
ilm_75_df <- ilm_75_df[, 1:1249]
# find the common genes between two data frames
common_genes <- intersect(rownames(bgi_75_df), rownames(ilm_75_df))
colsToUse <- intersect(colnames(bgi_75_df), colnames(ilm_75_df))
match(do.call("paste", bgi_75_df[, colsToUse]), do.call("paste", ilm_75_df[, colsToUse]))
common_indices <- match(do.call("paste", bgi_75_df[, colsToUse]), do.call("paste", ilm_75_df[, colsToUse]))
View(common_indices)
reticulate::repl_python()
reticulate::repl_python()
path_to_sce_qc
'../data/qc/DH7/sce_qc.rds', '../data/qc/DH24/sce_qc.rds'
path_to_sce_qc <- list('../data/qc/DH7/sce_qc.rds', '../data/qc/DH24/sce_qc.rds')
path_to_sce_qc
# lets start!
# load the data, note that we aren't using the normalized data since we will use seurat's normalization method
sces <- lapply(path_to_sce_qc, function(path) readRDS(path))
sces
reticulate::repl_python()
sce <- readRDS("/huntsman/amunzur/data/processed/DH7/sce.rds")
sce$id
reticulate::repl_python()
uncorrected <- readRDS("/huntsman/amunzur/data/integrated/DH4-DH17-DH10/uncorrected.rds")
lol <- list('../data/clustered/sce/DH7/sce_clus.rds', '../data/clustered/sce/DH24/sce_clus.rds')
lol
# load the sces
sces <- lapply(lol, function(some_path) readRDS(some_path))
here()
lol <- list('/huntsman/amunzur/scRNAseq-workflow../data/clustered/sce/DH7/sce_clus.rds', '/huntsman/amunzur/scRNAseq-workflow../data/clustered/sce/DH24/sce_clus.rds')
# load the sces
sces <- lapply(lol, function(some_path) readRDS(some_path))
sces <- lapply(lol, function(some_path) readRDS(some_path))
# load the sces
sces <- lapply(lol, function(some_path) readRDS(some_path))
lol <- list('/huntsman/amunzur/scRNAseq-workflow/../data/clustered/sce/DH7/sce_clus.rds', '/huntsman/amunzur/scRNAseq-workflow/../data/clustered/sce/DH24/sce_clus.rds')
# load the sces
sces <- lapply(lol, function(some_path) readRDS(some_path))
sces <- lapply(lol, function(some_path) readRDS(some_path))
sces <- lapply(lol, function(some_path) readRDS(some_path))
lol <- list(../data/clustered/sce/DH7/sce_clus.rds ../data/clustered/sce/DH24/sce_clus.rds)
lol <- list('../data/clustered/sce/DH7/sce_clus.rds ../data/clustered/sce/DH24/sce_clus.rds')
lol
strsplit(lol, '')
strsplit(lol, ' ')
strsplit(lol[1], ' ')
lol[1]
lol[[1]]
strsplit(lol[[1]], ' ')
length(strsplit(lol[[1]], ' '))
a <- strsplit(lol[[1]], ' ')
a
do.call(list, a[[1]])
do.call(list, a[1])
result_1 <- strsplit(lol,"[[:space:]]")[[1]][1]
result_2 <- strsplit(lol,"[[:space:]]")[[1]][2]
result <- list(result_1,result_2)
result_1 <- strsplit(lol[[1]], ' ')[[1]][1]
result_2 <- strsplit(lol[[1]], ' ')[[1]][2]
result <- list(result_1,result_2)
result
lol
as.list(unlist(strsplit(lol[[1]], ' '))
)
)
2+2
print('lol')
max(1, 2)
knitr::opts_chunk$set(echo = TRUE)
message(print)
ids = 'DH1-DH2'
ids
strsplit(ids, '-')
as.list(unlist(strsplit(ids, ' ')))
as.list(unlist(strsplit(ids, '-')))
ids
strsplit(params$ids, "-")[[1]]
strsplit(ids, "-")[[1]]
list(ids[[1]], ids[[2]])
ids <- strsplit(ids, "-")[[1]]
list(ids[[1]], ids[[2]])
ids
ids <- 'DH1-DH2'
ids
strsplit(params$ids, "-")[[1]]
strsplit(ids, "-")[[1]]
list(strsplit(ids, "-")[[1]])
lol <- strsplit(ids, "-")[[1]]
lol
lol[[1]]
lol[[2]]
length(lol)
typeof(lol)
dh10 <- readRDS("/huntsman/amunzur/data/qc/DH10/sce_qc.rds")
dh11 <- readRDS("/huntsman/amunzur/data/qc/DH11_control/sce_qc.rds")
sces <- list(dh10, dh11)
sces
lapply(sces, function(sce) unique(sce$id))
reticulate::repl_python()
